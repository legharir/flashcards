{"version":3,"sources":["DeckPage.js","QuestionAnswer.js","Flashcard.js","Flashcards.js","FlashcardPage.js","App.js","index.js"],"names":["Container","styled","div","DeckPage","decks","setDecks","useState","newDeckName","setNewDeckName","newDeckCreated","setNewDeckCreated","to","map","deck","style","margin","marginRight","className","onClick","deckName","window","confirm","req","indexedDB","open","onerror","e","console","error","target","errorCode","onsuccess","db","result","transaction","objectStore","delete","filter","onupgradeneeded","log","createObjectStore","keyPath","onDeleteDeck","value","onChange","Question","flashcard","QuestionAnswer","text","question","variant","imageUrl","questionImageUrl","Answer","answer","answerImageUrl","src","alt","styles","maxWidth","statusToColor","correct","incorrect","props","status","Clickable","span","Horizontal","AttemptBadge","Flashcard","setShowAnswer","setFlashcardStatus","deleteFlashcard","attempts","attempt","idx","showAnswer","Flashcards","flashcards","flashcardsList","args","getImageBlobs","rtfData","hexImages","curIdx","length","blipuidIdx","indexOf","hexImgStartIdx","hexImgEndIdx","hexImg","substring","push","trim","_","hexImage","imgByteArray","hexString","cleanedHexString","replace","bytes","i","byte","substr","parseInt","Uint8Array","hexStringToByteArray","Blob","type","blobTodataUrl","blob","Promise","resolve","reject","reader","FileReader","onload","readAsDataURL","Vertical","Breather","FlaschardsContainer","SortOptions","DeleteAllButton","FlashcardPage","useParams","setFlashcards","setDb","useEffect","request","get","handlePaste","a","addFlashcardsFromClipboardData","clipboardData","document","addEventListener","removeEventListener","put","name","textContainsImage","startsWithWhitespace","test","endsWithWhitespace","Boolean","createFlashcards","textData","imageUrls","split","newFlashCards","shift","getData","imageBlobs","imageBlob","flashcardsToAdd","sortFlashcards","updatedFlashcards","sort","b","sortFlashcardsByAttempt","getNumAttempts","reduce","acc","cur","handleShowHideAllFlashcardAnswers","showFlashcardAnswers","shuffleFlashcards","array","randomIndex","currentIndex","Math","floor","random","shuffle","maxHeight","flashcardIndex","App","JSON","parse","localStorage","getItem","setItem","stringify","exact","path","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.30f452ea.chunk.js","sourcesContent":["import { useState } from \"react\";\r\nimport { Link, Redirect } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n  padding: 1em;\r\n`;\r\n\r\nfunction DeckPage({ decks, setDecks }) {\r\n  const [newDeckName, setNewDeckName] = useState(\"\");\r\n  const [newDeckCreated, setNewDeckCreated] = useState(false);\r\n\r\n  const createNewDeck = () => {\r\n    setDecks([...decks, newDeckName]);\r\n    setNewDeckCreated(true);\r\n  };\r\n\r\n  const onDeleteDeck = (deckName) => {\r\n    if (\r\n      !window.confirm(`Are you sure you wish to delete the ${deckName} deck?`)\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    const req = indexedDB.open(\"flashcards\", 1);\r\n\r\n    req.onerror = (e) => {\r\n      console.error(\r\n        \"Could not open connection to database, error code: \",\r\n        e.target.errorCode\r\n      );\r\n    };\r\n\r\n    req.onsuccess = (e) => {\r\n      const db = e.target.result;\r\n      db.onerror = (e) => console.error(e.target.errorCode);\r\n\r\n      const transaction = db.transaction(\"decks\", \"readwrite\");\r\n      const objectStore = transaction.objectStore(\"decks\");\r\n      const request = objectStore.delete(deckName);\r\n      request.onsuccess = (e) => {\r\n        setDecks(decks.filter((deck) => deck !== deckName));\r\n      };\r\n    };\r\n\r\n    req.onupgradeneeded = (e) => {\r\n      console.log(\"Performing DB migration...\");\r\n      const db = e.target.result;\r\n      db.createObjectStore(\"decks\", { keyPath: \"name\" });\r\n    };\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      {newDeckCreated && <Redirect to={`/deck/${newDeckName}`} />}\r\n\r\n      {decks.map((deck) => (\r\n        <div style={{ margin: \"0.5em\" }} key={deck}>\r\n          <Link to={`/deck/${deck}`} style={{ marginRight: \"1em\" }}>\r\n            {deck}\r\n          </Link>\r\n          <button\r\n            className=\"btn btn-danger btn-sm\"\r\n            onClick={() => onDeleteDeck(deck)}\r\n          >\r\n            Delete\r\n          </button>\r\n        </div>\r\n      ))}\r\n\r\n      <input\r\n        value={newDeckName}\r\n        onChange={(e) => setNewDeckName(e.target.value)}\r\n        style={{ marginRight: \"0.5em\" }}\r\n      ></input>\r\n      <button className=\"btn btn-primary\" onClick={createNewDeck}>\r\n        Create New Deck\r\n      </button>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default DeckPage;\r\n","import styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: flex-start;\r\n`;\r\n\r\nexport function Question({ flashcard }) {\r\n  return (\r\n    <QuestionAnswer\r\n      text={flashcard.question}\r\n      variant=\"question\"\r\n      imageUrl={flashcard.questionImageUrl}\r\n    />\r\n  );\r\n}\r\n\r\nexport function Answer({ flashcard }) {\r\n  return (\r\n    <QuestionAnswer\r\n      text={flashcard.answer}\r\n      variant=\"answer\"\r\n      imageUrl={flashcard.answerImageUrl}\r\n    />\r\n  );\r\n}\r\n\r\nfunction QuestionAnswer({ text, imageUrl, variant }) {\r\n  return (\r\n    <Container>\r\n      {variant === \"question\" ? <strong>{text}</strong> : <i>{text}</i>}\r\n      {imageUrl && <img src={imageUrl} alt=\"\" styles={{ maxWidth: \"60%\" }} />}\r\n    </Container>\r\n  );\r\n}\r\n","import styled from \"styled-components\";\r\nimport { Question, Answer } from \"./QuestionAnswer\";\r\n\r\nconst statusToColor = {\r\n  correct: \"#b9edaf\",\r\n  incorrect: \"#edafb6\",\r\n};\r\n\r\nconst Container = styled.div`\r\n  border: 1px solid #a4a4a4;\r\n  margin: 1em 0em 1em 0em;\r\n  padding: 1em;\r\n  background: ${(props) => statusToColor[props.status]};\r\n  border-radius: 5px;\r\n`;\r\n\r\nconst Clickable = styled.span`\r\n  cursor: pointer;\r\n`;\r\n\r\nconst Horizontal = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n`;\r\n\r\nconst AttemptBadge = styled.span`\r\n  margin: 0.2em;\r\n`;\r\n\r\nfunction Flashcard({\r\n  flashcard,\r\n  setShowAnswer,\r\n  setFlashcardStatus,\r\n  deleteFlashcard,\r\n}) {\r\n  return (\r\n    <Container status={flashcard.status}>\r\n      <Horizontal>\r\n        <div>\r\n          <Clickable onClick={() => setFlashcardStatus(\"correct\")}>\r\n            ✔️\r\n          </Clickable>\r\n          <Clickable onClick={() => setFlashcardStatus(\"incorrect\")}>\r\n            ❌\r\n          </Clickable>\r\n          <Clickable onClick={() => setFlashcardStatus(\"unattempted\")}>\r\n            🔄\r\n          </Clickable>\r\n        </div>\r\n        <Clickable onClick={() => deleteFlashcard()}>🗑️</Clickable>\r\n      </Horizontal>\r\n      <div style={{ margin: \"1em 1em 1em 0em\" }}>\r\n        {flashcard.attempts.map((attempt, idx) => (\r\n          <AttemptBadge\r\n            key={flashcard.question + idx}\r\n            className={`badge badge-${\r\n              attempt === \"correct\" ? \"success\" : \"danger\"\r\n            }`}\r\n          >\r\n            {attempt}\r\n          </AttemptBadge>\r\n        ))}\r\n      </div>\r\n      <Question flashcard={flashcard} />\r\n      <button\r\n        className=\"btn btn-link btn-sm no-margin-left\"\r\n        onClick={() => setShowAnswer(!flashcard.showAnswer)}\r\n      >\r\n        {flashcard.showAnswer ? \"Hide Answer\" : \"Reveal Answer\"}\r\n      </button>\r\n      {flashcard.showAnswer && <Answer flashcard={flashcard} />}\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Flashcard;\r\n","import Flashcard from \"./Flashcard\";\r\n\r\nfunction Flashcards({\r\n  flashcards,\r\n  setShowAnswer,\r\n  setFlashcardStatus,\r\n  deleteFlashcard,\r\n}) {\r\n  const flashcardsList = flashcards.map((flashcard, idx) => (\r\n    <Flashcard\r\n      key={flashcard.question + idx}\r\n      flashcard={flashcard}\r\n      setShowAnswer={(...args) => setShowAnswer(idx, ...args)}\r\n      setFlashcardStatus={(...args) => setFlashcardStatus(idx, ...args)}\r\n      deleteFlashcard={(...args) => deleteFlashcard(idx, ...args)}\r\n    />\r\n  ));\r\n\r\n  return <>{flashcardsList}</>;\r\n}\r\n\r\nexport default Flashcards;\r\n","import { useEffect, useState } from \"react\";\nimport Flashcards from \"./Flashcards\";\nimport styled from \"styled-components\";\nimport { useParams } from \"react-router-dom\";\n\nfunction shuffle(array) {\n  let currentIndex = array.length,\n    randomIndex;\n\n  // While there remain elements to shuffle...\n  while (currentIndex !== 0) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex--;\n\n    // And swap it with the current element.\n    [array[currentIndex], array[randomIndex]] = [\n      array[randomIndex],\n      array[currentIndex],\n    ];\n  }\n\n  return array;\n}\n\nfunction getImageBlobs(rtfData) {\n  let hexImages = [];\n  let curIdx = 0;\n  while (curIdx < rtfData.length) {\n    const blipuidIdx = rtfData.indexOf(\"blipuid\", curIdx);\n    if (blipuidIdx === -1) break;\n\n    const hexImgStartIdx = rtfData.indexOf(\"}\", blipuidIdx);\n    const hexImgEndIdx = rtfData.indexOf(\"}\", hexImgStartIdx + 1);\n    const hexImg = rtfData.substring(hexImgStartIdx + 1, hexImgEndIdx);\n\n    hexImages.push(hexImg.trim());\n    curIdx = hexImgEndIdx + 1;\n  }\n\n  // for some reason only every even indexed hex image is valid.\n  return hexImages\n    .filter((_, idx) => idx % 2 === 0)\n    .map((hexImage) => {\n      const imgByteArray = hexStringToByteArray(hexImage);\n      return new Blob([imgByteArray], {\n        type: \"application/octet-stream\",\n      });\n    });\n}\n\nfunction blobTodataUrl(blob) {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = () => {\n      resolve(reader.result);\n    };\n    reader.onerror = reject;\n    reader.readAsDataURL(blob);\n  });\n}\n\nfunction hexStringToByteArray(hexString) {\n  const cleanedHexString = hexString.replace(/[^A-Fa-f0-9]/g, \"\");\n  let bytes = [];\n\n  for (let i = 0; i < cleanedHexString.length / 2; i++) {\n    let byte = cleanedHexString.substr(i * 2, 2);\n    bytes[i] = parseInt(byte, 16);\n  }\n  return new Uint8Array(bytes);\n}\n\nconst Container = styled.div`\n  margin: 2em;\n  max-height: 93vh;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst Horizontal = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst Vertical = styled.div`\n  overflow: none;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst Clickable = styled.span`\n  cursor: pointer;\n`;\n\nconst AttemptBadge = styled.span`\n  margin: 0.2em;\n`;\n\nconst Breather = styled.span`\n  margin-left: 1em;\n  margin-right: 1em;\n  white-space: nowrap;\n`;\n\nconst FlaschardsContainer = styled.div`\n  overflow: auto;\n`;\n\nconst SortOptions = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst DeleteAllButton = styled.div`\n  justify-self: flex-end;\n`;\n\nfunction FlashcardPage() {\n  const { deckName } = useParams();\n\n  const [flashcards, setFlashcards] = useState([]);\n  const [db, setDb] = useState(null);\n\n  useEffect(() => {\n    const req = indexedDB.open(\"flashcards\", 1);\n\n    req.onerror = (e) => {\n      console.error(\n        \"Could not open connection to database, error code: \",\n        e.target.errorCode\n      );\n    };\n\n    req.onsuccess = (e) => {\n      const db = e.target.result;\n      db.onerror = (e) => console.error(e.target.errorCode);\n      setDb(db);\n\n      const transaction = db.transaction(\"decks\");\n      const objectStore = transaction.objectStore(\"decks\");\n      const request = objectStore.get(deckName);\n      request.onsuccess = (e) => {\n        setFlashcards(request.result?.flashcards ?? []);\n      };\n    };\n\n    req.onupgradeneeded = (e) => {\n      console.log(\"Performing DB migration...\");\n      const db = e.target.result;\n      db.createObjectStore(\"decks\", { keyPath: \"name\" });\n    };\n  }, [deckName]);\n\n  useEffect(() => {\n    async function handlePaste(e) {\n      if (\n        flashcards.length > 0 &&\n        !window.confirm(\"Add flashcards from clipboard?\")\n      ) {\n        return;\n      }\n\n      addFlashcardsFromClipboardData(e.clipboardData);\n    }\n\n    document.addEventListener(\"paste\", handlePaste);\n    return () => {\n      document.removeEventListener(\"paste\", handlePaste);\n    };\n  }, [flashcards.length]);\n\n  useEffect(() => {\n    if (db) {\n      const transaction = db.transaction(\"decks\", \"readwrite\");\n      const objectStore = transaction.objectStore(\"decks\");\n      objectStore.put({ name: deckName, flashcards });\n    }\n  }, [db, deckName, flashcards]);\n\n  const textContainsImage = (text) => {\n    if (text === \" \") return true;\n    const startsWithWhitespace = /^\\s/.test(text);\n    const endsWithWhitespace = /\\s$/.test(text);\n    return Boolean(startsWithWhitespace ^ endsWithWhitespace);\n  };\n\n  const createFlashcards = (textData, imageUrls) => {\n    textData = textData.split(/\\t|\\r\\n|\\n/);\n    const newFlashCards = [];\n\n    for (let i = 0; i < textData.length - 1; i = i + 2) {\n      const question = textData[i];\n      const answer = textData[i + 1];\n\n      newFlashCards.push({\n        question,\n        answer,\n        questionImageUrl: textContainsImage(question) ? imageUrls.shift() : \"\",\n        answerImageUrl: textContainsImage(answer) ? imageUrls.shift() : \"\",\n        status: \"unattempted\",\n        showAnswer: false,\n        attempts: [],\n      });\n    }\n\n    if (imageUrls.length > 0) {\n      console.error(\"Something strange happened...\");\n      console.log(textData);\n      console.log(imageUrls);\n    }\n    return newFlashCards;\n  };\n\n  async function addFlashcardsFromClipboardData(clipboardData) {\n    const textData = clipboardData.getData(\"text\");\n    const rtfData = clipboardData.getData(\"text/rtf\");\n    const imageBlobs = getImageBlobs(rtfData);\n\n    const imageUrls = [];\n    for (const imageBlob of imageBlobs) {\n      imageUrls.push(await blobTodataUrl(imageBlob));\n    }\n\n    const flashcardsToAdd = createFlashcards(textData, imageUrls);\n    setFlashcards((flashcards) => [...flashcards, ...flashcardsToAdd]);\n  }\n\n  const setShowAnswer = (flashcardIndex, showAnswer) => {\n    const updatedFlashcards = flashcards.map((flashcard, idx) =>\n      idx !== flashcardIndex ? flashcard : { ...flashcard, showAnswer }\n    );\n    setFlashcards(updatedFlashcards);\n  };\n\n  const setFlashcardStatus = (flashcardIndex, status) => {\n    const updatedFlashcards = flashcards.map((flashcard, idx) =>\n      idx !== flashcardIndex\n        ? flashcard\n        : {\n            ...flashcard,\n            status,\n            attempts:\n              status === \"unattempted\" ? [] : [...flashcard.attempts, status],\n          }\n    );\n    setFlashcards(updatedFlashcards);\n  };\n\n  const sortFlashcards = (status) => {\n    const updatedFlashcards = [...flashcards].sort((a, b) => {\n      if (a.status === status && b.status !== status) return -1;\n      else if (a.status !== status && b.status === status) return 1;\n      return 0;\n    });\n    setFlashcards(updatedFlashcards);\n  };\n\n  const sortFlashcardsByAttempt = (attempt) => {\n    const getNumAttempts = (flashcard) =>\n      flashcard.attempts.reduce((acc, cur) => {\n        if (cur === attempt) {\n          return acc + 1;\n        }\n        return acc;\n      }, 0);\n\n    const updatedFlashcards = [...flashcards].sort(\n      (a, b) => getNumAttempts(b) - getNumAttempts(a)\n    );\n    setFlashcards(updatedFlashcards);\n  };\n\n  const handleShowHideAllFlashcardAnswers = (showFlashcardAnswers) => {\n    setFlashcards(\n      flashcards.map((flashcard) => ({\n        ...flashcard,\n        showAnswer: showFlashcardAnswers,\n      }))\n    );\n  };\n\n  const shuffleFlashcards = () => {\n    setFlashcards(shuffle([...flashcards]));\n  };\n\n  const deleteFlashcard = (flashcardIndex) => {\n    setFlashcards(flashcards.filter((_, idx) => idx !== flashcardIndex));\n  };\n\n  const deleteFlashcards = () => {\n    if (\n      window.confirm(\"Are you sure you want to delete all your flashcards?\")\n    ) {\n      setFlashcards([]);\n    }\n  };\n\n  return (\n    <Container>\n      {flashcards.length > 0 ? (\n        <Horizontal>\n          <div>\n            Sort:\n            <SortOptions>\n              <div>\n                <Clickable onClick={() => sortFlashcards(\"correct\")}>\n                  ✔️\n                </Clickable>\n                <Clickable onClick={() => sortFlashcards(\"incorrect\")}>\n                  ❌\n                </Clickable>\n                <Clickable onClick={() => sortFlashcards(\"unattempted\")}>\n                  🔄\n                </Clickable>\n              </div>\n              <div>\n                <Clickable onClick={() => sortFlashcardsByAttempt(\"correct\")}>\n                  <AttemptBadge className=\"badge badge-success\">\n                    # correct\n                  </AttemptBadge>\n                </Clickable>\n                <Clickable onClick={() => sortFlashcardsByAttempt(\"incorrect\")}>\n                  <AttemptBadge className=\"badge badge-danger\">\n                    # incorrect\n                  </AttemptBadge>\n                </Clickable>\n              </div>\n            </SortOptions>\n          </div>\n          <div>\n            <button\n              style={{ maxHeight: \"50%\" }}\n              onClick={() => shuffleFlashcards()}\n              className=\"btn btn-secondary btn-sm\"\n            >\n              Shuffle\n            </button>\n          </div>\n          <div className=\"btn-group\">\n            <button\n              style={{ maxHeight: \"50%\" }}\n              className=\"btn btn-secondary btn-sm\"\n              onClick={() => handleShowHideAllFlashcardAnswers(true)}\n            >\n              Show Answers\n            </button>{\" \"}\n            <button\n              style={{ maxHeight: \"50%\" }}\n              className=\"btn btn-secondary btn-sm\"\n              onClick={() => handleShowHideAllFlashcardAnswers(false)}\n            >\n              Hide Answers\n            </button>\n          </div>\n          <Vertical>\n            <Breather>\n              Attempted:{\" \"}\n              {\n                <strong>\n                  {flashcards.reduce(\n                    (acc, cur) => (cur.attempts.length > 0 ? acc + 1 : acc),\n                    0\n                  )}\n                </strong>\n              }\n            </Breather>\n            <Breather>\n              Unattempted:{\" \"}\n              {\n                <strong>\n                  {flashcards.reduce(\n                    (acc, cur) => (cur.attempts.length > 0 ? acc : acc + 1),\n                    0\n                  )}\n                </strong>\n              }\n            </Breather>\n            <Breather>Total: {<strong>{flashcards.length}</strong>}</Breather>\n          </Vertical>\n          <DeleteAllButton>\n            <button\n              className=\"btn btn-danger btn-small\"\n              onClick={deleteFlashcards}\n            >\n              Delete flashcards\n            </button>\n          </DeleteAllButton>\n        </Horizontal>\n      ) : (\n        <div>\n          <h2>Copy some data, then use ⌘+V to create flashcards.</h2>\n        </div>\n      )}\n      <FlaschardsContainer>\n        <Flashcards\n          flashcards={flashcards}\n          setShowAnswer={setShowAnswer}\n          setFlashcardStatus={setFlashcardStatus}\n          deleteFlashcard={deleteFlashcard}\n        />\n      </FlaschardsContainer>\n    </Container>\n  );\n}\n\nexport default FlashcardPage;\n","import DeckPage from \"./DeckPage\";\r\nimport FlashcardPage from \"./FlashcardPage\";\r\nimport { BrowserRouter as Router, Link, Route, Switch } from \"react-router-dom\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nfunction App() {\r\n  const [decks, setDecks] = useState(\r\n    JSON.parse(localStorage.getItem(\"decks\")) ?? []\r\n  );\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"decks\", JSON.stringify(decks));\r\n  }, [decks]);\r\n\r\n  return (\r\n    <Router>\r\n      <>\r\n        <Link to=\"/\">Decks</Link>\r\n\r\n        <Switch>\r\n          <Route exact path=\"/\">\r\n            <DeckPage decks={decks} setDecks={setDecks} />\r\n          </Route>\r\n          <Route path=\"/deck/:deckName\">\r\n            <FlashcardPage />\r\n          </Route>\r\n        </Switch>\r\n      </>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}